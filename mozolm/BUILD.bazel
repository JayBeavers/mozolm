package(default_visibility = ["//mozolm:__subpackages__"])

load("@com_github_grpc_grpc//bazel:cc_grpc_library.bzl", "cc_grpc_library")

cc_library(
    name = "mozolm_models",
    srcs = [
        "mozolm_bigram_char_model.cc",
        "mozolm_model.cc",
    ],
    hdrs = [
        "mozolm_bigram_char_model.h",
        "mozolm_model.h",
    ],
    deps = [
        ":lm_scores_cc_proto",
        "@io_absl_cpp//absl/strings",
        "@io_absl_cpp//absl/synchronization",
        "//mozolm/stubs:integral_types",
        "//mozolm/stubs:logging",
    ],
)

# Async server code (completion-queue based).

cc_library(
    name = "mozolm_server_async_impl",
    srcs = ["mozolm_server_async_impl.cc"],
    hdrs = ["mozolm_server_async_impl.h"],
    deps = [
        ":mozolm_models",
        ":lm_scores_cc_grpc_proto",
        ":lm_scores_cc_proto",
        "@com_github_grpc_grpc//:grpc++",
        "@io_absl_cpp//absl/flags:flag",
        "@io_absl_cpp//absl/functional:bind_front",
        "@io_absl_cpp//absl/synchronization",
    ],
)

cc_binary(
    name = "mozolm_server_async",
    srcs = ["mozolm_server_async_main.cc"],
    deps = [
        ":grpc_util",
        ":grpc_util_cc_proto",
        "@com_google_protobuf//:protobuf",
        "@io_absl_cpp//absl/flags:flag",
        "@io_absl_cpp//absl/flags:parse",
    ],
)

cc_test(
    name = "mozolm_server_async_test",
    size = "small",
    srcs = ["mozolm_server_async_test.cc"],
    deps = [
        ":mozolm_server_async_impl",
        ":lm_scores_cc_grpc_proto",
        "@com_github_grpc_grpc//:grpc++",
        "@com_google_googletest//:gtest_main",
    ],
)

# Async client code (completion-queue based).

cc_library(
    name = "mozolm_client_async_impl",
    srcs = ["mozolm_client_async_impl.cc"],
    hdrs = ["mozolm_client_async_impl.h"],
    deps = [
        ":lm_scores_cc_grpc_proto",
        "@com_github_grpc_grpc//:grpc++",
        "@io_absl_cpp//absl/strings:str_format",
        "@io_absl_cpp//absl/synchronization",
        "//mozolm/stubs:integral_types",
        "//mozolm/stubs:logging",
    ],
)

cc_binary(
    name = "mozolm_client_async",
    srcs = ["mozolm_client_async_main.cc"],
    deps = [
        ":grpc_util",
        ":grpc_util_cc_proto",
        ":mozolm_client",
        "@com_google_protobuf//:protobuf",
        "@io_absl_cpp//absl/flags:flag",
        "@io_absl_cpp//absl/flags:parse",
    ],
)

cc_library(
    name = "grpc_util",
    srcs = ["grpc_util.cc"],
    hdrs = ["grpc_util.h"],
    deps = [
        ":grpc_util_cc_proto",
        ":mozolm_client",
        ":mozolm_server_async_impl",
        "@com_github_grpc_grpc//:grpc++",
	    "@io_absl_cpp//absl/flags:flag",
        "@io_absl_cpp//absl/strings:str_format",
    ],
)

cc_library(
    name = "mozolm_client",
    srcs = ["mozolm_client.cc"],
    hdrs = ["mozolm_client.h"],
    deps = [
        ":grpc_util_cc_proto",
        ":mozolm_client_async_impl",
        "@com_github_grpc_grpc//:grpc++",
        "@io_absl_cpp//absl/random",
        "@io_absl_cpp//absl/strings:str_format",
        "@io_absl_cpp//absl/synchronization",
    ],
)

proto_library(
    name = "lm_scores_proto",
    srcs = ["lm_scores.proto"],
)

cc_proto_library(
    name = "lm_scores_cc_proto",
    deps = [":lm_scores_proto"],
)

cc_grpc_library(
    name = "lm_scores_cc_grpc_proto",
    srcs = [":lm_scores_proto"],
    deps = [":lm_scores_cc_proto"],
    grpc_only = True,
)

proto_library(
    name = "grpc_util_proto",
    srcs = ["grpc_util.proto"],
)

cc_proto_library(
    name = "grpc_util_cc_proto",
    deps = [":grpc_util_proto"],
)
