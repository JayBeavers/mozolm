// Copyright 2020 MozoLM Authors.
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//     http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

#include "mozolm/utf8_util.h"

#include "gmock/gmock.h"
#include "gtest/gtest.h"

using ::testing::ElementsAre;

namespace mozolm {
namespace utf8 {
namespace {

TEST(Utf8UtilTest, CheckStrSplitByChar) {
  EXPECT_THAT(StrSplitByChar("abcdefg"), ElementsAre(
      "a", "b", "c", "d", "e", "f", "g"));
  EXPECT_THAT(StrSplitByChar("‘≤’°÷Ä’•÷Ç"), ElementsAre(
      "‘≤", "’°", "÷Ä", "’•", "÷Ç"));
  EXPECT_THAT(StrSplitByChar("·â£·àÖ·à™"), ElementsAre(
      "·â£", "·àÖ", "·à™"));
  EXPECT_THAT(StrSplitByChar("‡∑É‡∑ä‡∑Ä‡∂∑‡∑è‡∑Ä‡∂∫"), ElementsAre(
      "‡∑É", "‡∑ä", "‡∑Ä", "‡∂∑", "‡∑è", "‡∑Ä", "‡∂∫"));
  EXPECT_THAT(StrSplitByChar("·Éõ·Éù·Éí·Éî·É°·Éê·Éö·Éõ·Éî·Éë·Éò·Éó"), ElementsAre(
      "·Éõ", "·Éù", "·Éí", "·Éî", "·É°", "·Éê", "·Éö", "·Éõ", "·Éî", "·Éë", "·Éò", "·Éó"));
  EXPECT_THAT(StrSplitByChar("‡∫ç‡∫¥‡∫ô‡∫î‡∫µ‡∫ï‡ªâ‡∫≠‡∫ô‡∫Æ‡∫±‡∫ö"), ElementsAre(
      "‡∫ç", "‡∫¥", "‡∫ô", "‡∫î", "‡∫µ", "‡∫ï", "‡ªâ", "‡∫≠", "‡∫ô", "‡∫Æ", "‡∫±", "‡∫ö"));
}

TEST(Utf8UtilTest, CheckDecodeUnicodeChar) {
  char32 code;
  EXPECT_EQ(1, DecodeUnicodeChar("z", &code));
  EXPECT_EQ(122, code);
  EXPECT_EQ(3, DecodeUnicodeChar("‡∑É‡∑ä", &code));
  EXPECT_EQ(3523, code);  // The first letter: Sinhala Letter Dantaja Sayanna.
  EXPECT_EQ(2, DecodeUnicodeChar("‹®", &code));
  EXPECT_EQ(1832, code);  // Syriac Letter Sadhe.
  EXPECT_EQ(3, DecodeUnicodeChar("‡ºÑ", &code));
  EXPECT_EQ(3844, code);  // TIBETAN MARK INITIAL YIG MGO MDUN MA

  // Invalid UTF8. For examples, see:
  //   https://www.cl.cam.ac.uk/~mgk25/ucs/examples/UTF-8-test.txt
  EXPECT_EQ(1, DecodeUnicodeChar("\xfe\xfe\xff\xff", &code));
  EXPECT_EQ(kBadUTF8Char, code);
}

TEST(Utf8UtilTest, CheckEncodeUnicodeChar) {
  EXPECT_EQ("z", EncodeUnicodeChar(122));
  EXPECT_EQ("‹®", EncodeUnicodeChar(1832));
  EXPECT_EQ("‡ºÑ", EncodeUnicodeChar(3844));
  // Cuneiform sign dag kisim5 times tak4 (U+1206B).
  EXPECT_EQ("íÅ´", EncodeUnicodeChar(73835));
}

}  // namespace
}  // namespace utf8
}  // namespace mozolm
